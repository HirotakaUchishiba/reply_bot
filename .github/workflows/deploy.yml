name: Deploy Slack AI Email Assistant

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# 同時実行を制限してTerraform状態ロック競合を防止
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-plan:
    name: Test and Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest moto

      - name: Lint with flake8
        run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run unit tests with pytest
        run: pytest tests/ -v

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check Required Secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.TF_STATE_BUCKET }}" ]; then
            echo "❌ TF_STATE_BUCKET secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.TF_STATE_DYNAMODB_TABLE }}" ]; then
            echo "❌ TF_STATE_DYNAMODB_TABLE secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.SENDER_EMAIL_ADDRESS }}" ]; then
            echo "❌ SENDER_EMAIL_ADDRESS secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.SLACK_CHANNEL_ID }}" ]; then
            echo "❌ SLACK_CHANNEL_ID secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          echo "✅ 必要なSecretsがすべて設定されています"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Terraform Init
        run: |
          cd infra/terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=infra/root/${GITHUB_REF_NAME}.tfstate" \
            -backend-config="region=ap-northeast-1" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Plan
        run: |
          cd infra/terraform
          terraform plan -out=tfplan -lock-timeout=5m
        env:
          TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_tf_state_dynamodb_table: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
          TF_VAR_aws_region: ap-northeast-1
          TF_VAR_sender_email_address: ${{ secrets.SENDER_EMAIL_ADDRESS }}
          TF_VAR_slack_channel_id: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: infra/terraform/tfplan

  deploy-to-staging:
    name: Deploy to Staging
    needs: test-and-plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check Required Secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.TF_STATE_BUCKET }}" ]; then
            echo "❌ TF_STATE_BUCKET secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.TF_STATE_DYNAMODB_TABLE }}" ]; then
            echo "❌ TF_STATE_DYNAMODB_TABLE secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.SENDER_EMAIL_ADDRESS }}" ]; then
            echo "❌ SENDER_EMAIL_ADDRESS secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.SLACK_CHANNEL_ID }}" ]; then
            echo "❌ SLACK_CHANNEL_ID secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          echo "✅ 必要なSecretsがすべて設定されています"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve tfplan -lock-timeout=5m
        env:
          TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_tf_state_dynamodb_table: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
          TF_VAR_aws_region: ap-northeast-1
          TF_VAR_sender_email_address: ${{ secrets.SENDER_EMAIL_ADDRESS }}
          TF_VAR_slack_channel_id: ${{ secrets.SLACK_CHANNEL_ID }}

  deploy-to-prod:
    name: Deploy to Production
    needs: test-and-plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check Required Secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.TF_STATE_BUCKET }}" ]; then
            echo "❌ TF_STATE_BUCKET secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.TF_STATE_DYNAMODB_TABLE }}" ]; then
            echo "❌ TF_STATE_DYNAMODB_TABLE secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.SENDER_EMAIL_ADDRESS }}" ]; then
            echo "❌ SENDER_EMAIL_ADDRESS secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          if [ -z "${{ secrets.SLACK_CHANNEL_ID }}" ]; then
            echo "❌ SLACK_CHANNEL_ID secretが設定されていません"
            echo ".github/SECRETS_SETUP.mdの説明に従ってGitHub Secretsを設定してください"
            exit 1
          fi
          echo "✅ 必要なSecretsがすべて設定されています"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve tfplan -lock-timeout=5m
        env:
          TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_tf_state_dynamodb_table: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
          TF_VAR_aws_region: ap-northeast-1
          TF_VAR_sender_email_address: ${{ secrets.SENDER_EMAIL_ADDRESS }}
          TF_VAR_slack_channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
